{{- if .Values.olakeWorker.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: olake-worker-config
  namespace: {{ include "olake.namespace" . }}
  annotations: {}
  labels:
    app.kubernetes.io/name: olake-worker
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: worker
    {{- include "olake.labels" . | nindent 4 }}
data:
  # Temporal Configuration
  TEMPORAL_ADDRESS: "temporal.{{ include "olake.namespace" . }}.svc.cluster.local:7233"
  TEMPORAL_TASK_QUEUE: "OLAKE_K8S_TASK_QUEUE"
  
  # Database Configuration
  DB_HOST: "postgresql.{{ include "olake.namespace" . }}.svc.cluster.local"
  DB_PORT: "5432"
  DB_NAME: "postgres"
  DB_USER: {{ .Values.postgresql.auth.postgresUser | quote }}
  DB_SSLMODE: "disable"
  
  # Timeout Configuration
  WORKFLOW_TIMEOUT_DISCOVER: {{ .Values.olakeWorker.config.timeouts.workflow.discover | quote }}
  WORKFLOW_TIMEOUT_TEST: {{ .Values.olakeWorker.config.timeouts.workflow.test | quote }}
  WORKFLOW_TIMEOUT_SYNC: {{ .Values.olakeWorker.config.timeouts.workflow.sync | quote }}
  ACTIVITY_TIMEOUT_DISCOVER: {{ .Values.olakeWorker.config.timeouts.activity.discover | quote }}
  ACTIVITY_TIMEOUT_TEST: {{ .Values.olakeWorker.config.timeouts.activity.test | quote }}
  ACTIVITY_TIMEOUT_SYNC: {{ .Values.olakeWorker.config.timeouts.activity.sync | quote }}
  
  # Kubernetes Configuration
  WORKER_NAMESPACE: {{ include "olake.namespace" . | quote }}
  IMAGE_REGISTRY: "olakego"
  IMAGE_PULL_POLICY: "IfNotPresent"
  SERVICE_ACCOUNT: {{ include "olake.workerServiceAccountName" . | quote }}
  OLAKE_STORAGE_PVC_NAME: {{ include "olake.sharedStoragePVC" . | quote }}
  
  # Worker Configuration
  MAX_CONCURRENT_ACTIVITIES: {{ .Values.olakeWorker.config.worker.maxConcurrentActivities | quote }}
  MAX_CONCURRENT_WORKFLOWS: {{ .Values.olakeWorker.config.worker.maxConcurrentWorkflows | quote }}
  
  # Logging Configuration
  LOG_LEVEL: {{ .Values.olakeWorker.config.logging.level | quote }}
  LOG_FORMAT: {{ .Values.olakeWorker.config.logging.format | quote }}
  
  # =================================================================
  # JOB SCHEDULING CONFIGURATION
  # =================================================================
  {{- if .Values.global.job }}
  
  # Validate strategy values for all activity types
  {{- range $activity := list "sync" "discover" "test" }}
    {{- $config := index $.Values.global.job $activity | default dict }}
    {{- $strategy := $config.antiAffinity.strategy }}
    {{- if and $strategy (not (has $strategy (list "soft" "hard"))) }}
      {{- fail (printf "Invalid antiAffinity strategy '%s' for %s jobs. Must be 'soft' or 'hard'." $strategy $activity) }}
    {{- end }}
  {{- end }}
  
  # Generate environment variables for each activity type
  {{- include "olake.job.schedulingEnvVars" (dict "Values" .Values "activityName" "sync") | nindent 2 }}
  {{- include "olake.job.schedulingEnvVars" (dict "Values" .Values "activityName" "discover") | nindent 2 }}
  {{- include "olake.job.schedulingEnvVars" (dict "Values" .Values "activityName" "test") | nindent 2 }}
  
  {{- end }}
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: {{ include "olake.namespace" . }}
  annotations: {}
  labels:
    {{- include "olake.labels" . | nindent 4 }}
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  serviceName: postgresql
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: database
  template:
    metadata:
      annotations:
        {{- with .Values.postgresql.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: database
        {{- with .Values.postgresql.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.postgresql.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: postgresql
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        envFrom:
        - secretRef:
            name: postgresql-secret
        {{- $defaultResources := dict 
          "requests" (dict "memory" "512Mi" "cpu" "500m")
        }}
        {{- $resources := mergeOverwrite $defaultResources (.Values.postgresql.resources | default dict) }}
        {{- $defaultReadinessProbe := dict 
          "initialDelaySeconds" 5
          "periodSeconds" 10
          "timeoutSeconds" 5
          "failureThreshold" 6
          "successThreshold" 1
          "exec" (dict "command" (list "/bin/sh" "-c" "exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432"))
        }}
        {{- $readinessProbe := mergeOverwrite $defaultReadinessProbe (.Values.postgresql.readinessProbe | default dict) }}
        readinessProbe:
          {{- toYaml $readinessProbe | nindent 10 }}
        {{- $defaultLivenessProbe := dict 
          "initialDelaySeconds" 30
          "periodSeconds" 10
          "timeoutSeconds" 5
          "failureThreshold" 6
          "successThreshold" 1
          "exec" (dict "command" (list "/bin/sh" "-c" "exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432"))
        }}
        {{- $livenessProbe := mergeOverwrite $defaultLivenessProbe (.Values.postgresql.livenessProbe | default dict) }}
        livenessProbe:
          {{- toYaml $livenessProbe | nindent 10 }}
        resources:
          {{- toYaml $resources | nindent 10 }}
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgresql-storage
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: database
    spec:
      accessModes:
        - ReadWriteOnce
      {{- if .Values.global.storageClass }}
      storageClassName: {{ .Values.global.storageClass | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.postgresql.persistence.size }}
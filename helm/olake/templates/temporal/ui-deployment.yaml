{{- if and .Values.temporal.enabled .Values.temporal.ui.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: temporal-ui
  namespace: {{ .Values.namespace.name }}
  annotations: {}
  labels:
    app.kubernetes.io/name: temporal-ui
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: workflow-ui
    {{- include "olake.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.temporal.ui.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: temporal-ui
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: workflow-ui
  template:
    metadata:
      annotations:
        {{- with .Values.temporal.ui.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: temporal-ui
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: workflow-ui
        {{- with .Values.temporal.ui.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.temporal.ui.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.temporal.ui.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.temporal.ui.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.global.securityContext | nindent 8 }}
      initContainers:
      - name: wait-for-temporal
        image: busybox:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for Temporal server to be ready..."
          until nc -z temporal.{{ .Values.namespace.name }}.svc.cluster.local 7233; do
            echo "Temporal server is not ready yet. Waiting..."
            sleep 5
          done
          echo "Temporal server is ready!"
      containers:
      - name: temporal-ui
        image: "{{ .Values.temporal.ui.image.repository }}:{{ .Values.temporal.ui.image.tag }}"
        imagePullPolicy: {{ .Values.temporal.ui.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8081
          protocol: TCP
        env:
        {{- range .Values.temporal.ui.env }}
        - name: {{ .name }}
          value: {{ tpl .value $ | quote }}
        {{- end }}
        {{- $defaultResources := dict 
          "requests" (dict "memory" "128Mi" "cpu" "100m")
        }}
        {{- $resources := mergeOverwrite $defaultResources (.Values.temporal.ui.resources | default dict) }}
        resources:
          {{- toYaml $resources | nindent 10 }}
        {{- $defaultReadinessProbe := dict 
          "initialDelaySeconds" 10
          "periodSeconds" 10
          "timeoutSeconds" 5
          "failureThreshold" 3
          "successThreshold" 1
          "httpGet" (dict "path" "/" "port" 8081)
        }}
        {{- $readinessProbe := mergeOverwrite $defaultReadinessProbe (.Values.temporal.ui.readinessProbe | default dict) }}
        readinessProbe:
          {{- toYaml $readinessProbe | nindent 10 }}
        {{- $defaultLivenessProbe := dict 
          "initialDelaySeconds" 30
          "periodSeconds" 30
          "timeoutSeconds" 10
          "failureThreshold" 3
          "successThreshold" 1
          "httpGet" (dict "path" "/" "port" 8081)
        }}
        {{- $livenessProbe := mergeOverwrite $defaultLivenessProbe (.Values.temporal.ui.livenessProbe | default dict) }}
        livenessProbe:
          {{- toYaml $livenessProbe | nindent 10 }}
{{- end }}
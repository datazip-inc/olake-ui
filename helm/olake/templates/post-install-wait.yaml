{{- if and .Values.olakeUI.enabled .Values.olakeWorker.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "olake.fullname" . }}-post-install-wait
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: {{ include "olake.name" . }}-post-install-wait
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: post-install-wait
    {{- include "olake.labels" . | nindent 4 }}
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "olake.name" . }}-post-install-wait
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: post-install-wait
    spec:
      restartPolicy: Never
      containers:
      - name: wait-for-stack
        image: curlimages/curl:8.1.2
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for OLake stack to be ready..."
          echo "Checking olake-worker health endpoint..."
          
          for i in $(seq 1 60); do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://olake-k8s-worker.{{ .Values.namespace.name }}.svc.cluster.local:{{ .Values.olakeWorker.config.healthCheck.port }}/health || echo "000")
            if [ "$response" = "200" ]; then
              echo "✓ OLake stack is ready! (olake-worker health check passed)"
              exit 0
            fi
            echo "Attempt $i/60: Health check returned $response, waiting 10 seconds..."
            sleep 10
          done
          
          echo "✗ Timeout: OLake stack failed to become ready within 10 minutes"
          exit 1
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
{{- end }}
{{- if .Values.nfsServer.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "olake.fullname" . }}-nfs-server
  namespace: {{ include "olake.namespace" . }}
  labels:
    app.kubernetes.io/name: {{ include "olake.name" . }}-nfs-server
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: nfs-server
    {{- include "olake.labels" . | nindent 4 }}
spec:
  # This MUST match the metadata.name of the headless Service.
  serviceName: {{ include "olake.fullname" . }}-nfs-server
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "olake.name" . }}-nfs-server
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: nfs-server
  template:
    metadata:
      annotations:
        {{- with .Values.nfsServer.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "olake.name" . }}-nfs-server
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: nfs-server
        {{- with .Values.nfsServer.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.nfsServer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nfsServer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nfsServer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: nfs-server
        image: "{{ .Values.nfsServer.image.repository }}:{{ .Values.nfsServer.image.tag }}"
        imagePullPolicy: {{ .Values.nfsServer.image.pullPolicy }}
        ports:
        - name: nfs
          containerPort: 2049
        - name: mountd
          containerPort: 20048
        - name: rpcbind
          containerPort: 111
        securityContext:
          privileged: true
        volumeMounts:
        - name: nfs-storage
          mountPath: /exports
        env:
        - name: SHARED_DIRECTORY
          value: "/exports"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 2049
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 2049
          initialDelaySeconds: 10
          periodSeconds: 10
  # The volumeClaimTemplates section is the correct way to provision storage
  # for a StatefulSet. It will automatically create a PVC for each pod.
  volumeClaimTemplates:
  - metadata:
      name: nfs-storage
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      accessModes: {{ .Values.nfsServer.persistence.accessModes }}
      # This logic first checks for a specific storageClass under nfsServer,
      # and if it's not found, it falls back to the global one.
      {{- /* Determine the storage class name, falling back to global if needed */}}
      {{- $sc := .Values.nfsServer.persistence.storageClass | default .Values.global.storageClass -}}
      {{- /* Only render the storageClassName line if a value is present */}}
      {{- if $sc }}
      storageClassName: {{ $sc }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.nfsServer.persistence.size }}
{{- end }}
{{- if .Values.nfsServer.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "olake.fullname" . }}-nfs-service-creator
  namespace: {{ .Values.namespace.name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: {{ include "olake.name" . }}-service-creator
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: nfs-service-creator
    {{- include "olake.labels" . | nindent 4 }}
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "olake.name" . }}-service-creator
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: nfs-service-creator
    spec:
      serviceAccountName: {{ include "olake.fullname" . }}-nfs-cidr-detection
      restartPolicy: Never
      containers:
      - name: service-creator
        image: bitnami/kubectl:latest
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          echo "Creating NFS service with detected IP..."
          
          # Get the detected IP from ConfigMap
          STATIC_IP=$(kubectl get configmap {{ include "olake.fullname" . }}-nfs-ip-config -n {{ .Values.namespace.name }} -o jsonpath='{.data.staticIP}')
          
          if [ -z "$STATIC_IP" ]; then
            echo "Error: Could not get static IP from ConfigMap"
            exit 1
          fi
          
          echo "Using static IP: $STATIC_IP"
          
          # Create the NFS service with the detected IP
          cat <<'EOF' | sed "s/STATIC_IP_PLACEHOLDER/$STATIC_IP/g" | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: {{ include "olake.fullname" . }}-nfs-server
            namespace: {{ .Values.namespace.name }}
            labels:
              app.kubernetes.io/name: {{ include "olake.name" . }}-nfs-server
              app.kubernetes.io/instance: {{ .Release.Name }}
              app.kubernetes.io/component: nfs-server
          spec:
            type: ClusterIP
            clusterIP: STATIC_IP_PLACEHOLDER
            ports:
            - name: nfs
              port: 2049
              targetPort: 2049
            - name: mountd
              port: 20048
              targetPort: 20048
            - name: rpcbind
              port: 111
              targetPort: 111
            selector:
              app.kubernetes.io/name: {{ include "olake.name" . }}-nfs-server
              app.kubernetes.io/instance: {{ .Release.Name }}
              app.kubernetes.io/component: nfs-server
          EOF
          
          echo "NFS service created successfully"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
{{- end }}
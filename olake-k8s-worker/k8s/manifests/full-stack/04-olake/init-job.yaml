apiVersion: batch/v1
kind: Job
metadata:
  name: olake-signup-init
  namespace: olake
  labels:
    app: olake
    component: signup-init
spec:
  # Ensure job runs only once
  completions: 1
  parallelism: 1
  backoffLimit: 0  # Don't retry on failure
  template:
    spec:
      containers:
      - name: signup-init
        image: curlimages/curl:latest
        env:
        - name: USERNAME
          value: "admin"
        - name: PASSWORD
          value: "password"
        - name: EMAIL
          value: "admin@example.com"
        - name: OLAKE_APP_URL
          value: "http://olake.olake.svc.cluster.local:8080/signup"
        command:
        - /bin/sh
        - -c
        - |
          echo 'signup-init: Initializing user setup...'
          # The deploy-all.sh script ensures olake deployment is ready before running this job
          
          echo 'signup-init: Waiting 45 seconds for OLake to fully start up...'
          sleep 45
          
          # Check if user already exists before attempting signup
          echo "signup-init: Checking if user '$USERNAME' already exists..."
          EXISTING_USER_CHECK=$(curl -s -w '%{http_code}' -o /dev/null -X GET "http://olake.olake.svc.cluster.local:8080/api/user/$USERNAME" || echo "000")
          
          if [ "$EXISTING_USER_CHECK" = "200" ]; then
            echo "signup-init: User '$USERNAME' already exists. Skipping signup."
            echo 'signup-init: User setup process complete (user already exists).'
            exit 0
          fi
          
          JSON_PAYLOAD=$(printf '{"username":"%s","password":"%s","email":"%s"}' "$USERNAME" "$PASSWORD" "$EMAIL")
          echo "signup-init: Attempting to create user '$USERNAME' via $OLAKE_APP_URL"
          
          HTTP_RESPONSE_CODE=$(curl -s -o /dev/stderr -w '%{http_code}' -X POST -H 'Content-Type: application/json' -d "$JSON_PAYLOAD" "$OLAKE_APP_URL")
          
          # The actual response body from olake-ui will be printed to stderr by the '-o /dev/stderr' curl option.
          # A newline after stderr output from curl can make logs cleaner.
          echo ''
          
          if ! [ "$HTTP_RESPONSE_CODE" -eq "$HTTP_RESPONSE_CODE" ] 2>/dev/null; then
              echo "signup-init: ERROR - HTTP_RESPONSE_CODE is not a number: '$HTTP_RESPONSE_CODE'"
              exit 1
          fi
          
          if [ "$HTTP_RESPONSE_CODE" -ge 200 ] && [ "$HTTP_RESPONSE_CODE" -lt 300 ]; then
            echo "signup-init: User '$USERNAME' creation request successful (HTTP $HTTP_RESPONSE_CODE)."
          elif [ "$HTTP_RESPONSE_CODE" = "409" ] || [ "$HTTP_RESPONSE_CODE" = "400" ]; then
            echo "signup-init: User '$USERNAME' may already exist (HTTP $HTTP_RESPONSE_CODE). This is okay."
          else
            echo "signup-init: User '$USERNAME' creation request FAILED (HTTP $HTTP_RESPONSE_CODE). Server response body above."
            exit 1
          fi
          echo 'signup-init: User setup process complete.'
      restartPolicy: Never
  # Automatically clean up completed jobs after 1 hour
  ttlSecondsAfterFinished: 3600
